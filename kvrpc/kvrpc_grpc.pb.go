// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package kvrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KVrpcClient is the client API for KVrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KVrpcClient interface {
	RawPut(ctx context.Context, in *RawPutRequest, opts ...grpc.CallOption) (*RawPutResponse, error)
	RawGet(ctx context.Context, in *RawGetRequest, opts ...grpc.CallOption) (*RawGetResponse, error)
	RawDel(ctx context.Context, in *RawDelRequest, opts ...grpc.CallOption) (*RawDelResponse, error)
}

type kVrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewKVrpcClient(cc grpc.ClientConnInterface) KVrpcClient {
	return &kVrpcClient{cc}
}

func (c *kVrpcClient) RawPut(ctx context.Context, in *RawPutRequest, opts ...grpc.CallOption) (*RawPutResponse, error) {
	out := new(RawPutResponse)
	err := c.cc.Invoke(ctx, "/kvrpc.KVrpc/RawPut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVrpcClient) RawGet(ctx context.Context, in *RawGetRequest, opts ...grpc.CallOption) (*RawGetResponse, error) {
	out := new(RawGetResponse)
	err := c.cc.Invoke(ctx, "/kvrpc.KVrpc/RawGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVrpcClient) RawDel(ctx context.Context, in *RawDelRequest, opts ...grpc.CallOption) (*RawDelResponse, error) {
	out := new(RawDelResponse)
	err := c.cc.Invoke(ctx, "/kvrpc.KVrpc/RawDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KVrpcServer is the server API for KVrpc service.
// All implementations must embed UnimplementedKVrpcServer
// for forward compatibility
type KVrpcServer interface {
	RawPut(context.Context, *RawPutRequest) (*RawPutResponse, error)
	RawGet(context.Context, *RawGetRequest) (*RawGetResponse, error)
	RawDel(context.Context, *RawDelRequest) (*RawDelResponse, error)
	mustEmbedUnimplementedKVrpcServer()
}

// UnimplementedKVrpcServer must be embedded to have forward compatible implementations.
type UnimplementedKVrpcServer struct {
}

func (UnimplementedKVrpcServer) RawPut(context.Context, *RawPutRequest) (*RawPutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RawPut not implemented")
}
func (UnimplementedKVrpcServer) RawGet(context.Context, *RawGetRequest) (*RawGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RawGet not implemented")
}
func (UnimplementedKVrpcServer) RawDel(context.Context, *RawDelRequest) (*RawDelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RawDel not implemented")
}
func (UnimplementedKVrpcServer) mustEmbedUnimplementedKVrpcServer() {}

// UnsafeKVrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KVrpcServer will
// result in compilation errors.
type UnsafeKVrpcServer interface {
	mustEmbedUnimplementedKVrpcServer()
}

func RegisterKVrpcServer(s grpc.ServiceRegistrar, srv KVrpcServer) {
	s.RegisterService(&KVrpc_ServiceDesc, srv)
}

func _KVrpc_RawPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawPutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVrpcServer).RawPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kvrpc.KVrpc/RawPut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVrpcServer).RawPut(ctx, req.(*RawPutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVrpc_RawGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVrpcServer).RawGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kvrpc.KVrpc/RawGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVrpcServer).RawGet(ctx, req.(*RawGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVrpc_RawDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVrpcServer).RawDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kvrpc.KVrpc/RawDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVrpcServer).RawDel(ctx, req.(*RawDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KVrpc_ServiceDesc is the grpc.ServiceDesc for KVrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KVrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kvrpc.KVrpc",
	HandlerType: (*KVrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RawPut",
			Handler:    _KVrpc_RawPut_Handler,
		},
		{
			MethodName: "RawGet",
			Handler:    _KVrpc_RawGet_Handler,
		},
		{
			MethodName: "RawDel",
			Handler:    _KVrpc_RawDel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kvrpc.proto",
}
